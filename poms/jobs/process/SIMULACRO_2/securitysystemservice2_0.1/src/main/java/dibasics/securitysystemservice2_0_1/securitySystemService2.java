// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dibasics.securitysystemservice2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: securitySystemService2 Purpose: consulta datos token<br>
 * Description: consulta token <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class securitySystemService2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "securitySystemService2";
	private final String projectName = "DIBASICS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					securitySystemService2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(securitySystemService2.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_EntradaCustomers_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_EntradaPaises_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_EntradaGetToken_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tWriteJSONField_1_In_error(exception, errorComponent, globalMap);

	}

	public void tWriteJSONField_1_In_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTRequest_1_Loop_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	protected String restEndpoint;

	public void setRestEndpoint(String restEndpoint) {
		this.restEndpoint = restEndpoint;
	}

	public String getRestEndpoint() {
		return "http://localhost:8088/ayiacademy/securityaccess";
	}

	private boolean runInDaemonMode = true;

	public void setRunInDaemonMode(boolean flag) {
		runInDaemonMode = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final securitySystemService2 job;

		public RestServiceProviderImpl4TalendJob(securitySystemService2 job) {
			this.job = job;
		}

		private void populateRequestWithJobContext(java.util.Map<String, Object> requestGlobalMap,
				securitySystemService2 job) {
			// pass job DataSources
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
					.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
						.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(),
							new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
				}
				requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			// pass job shared connections
			requestGlobalMap.putAll(job.getSharedConnections4REST());

			// pass job concurrent map
			requestGlobalMap.put("concurrentHashMap", job.globalMap.get("concurrentHashMap"));
		}

		private void closePassedDataSourceConnections(java.util.Map<String, Object> requestGlobalMap) {
			// close connections in passed job DataSources
			try {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap
						.get(KEY_DB_DATASOURCES);
				if (null != restDataSources) {
					for (routines.system.TalendDataSource restDataSource : restDataSources.values()) {
						restDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

		private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {

			final java.util.Map<String, Object> globalMap = java.util.Collections
					.synchronizedMap(new java.util.HashMap<String, Object>());

			try {
				globalMap.put("restRequest", request);

				populateRequestWithJobContext(globalMap, job);

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false : (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element", dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(status)
						.entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers.entrySet()) {
						responseBuilder.header(header.getKey(), header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				closePassedDataSourceConnections(globalMap);
			}
		}

		private javax.ws.rs.core.Response processStreamingResponseRequest(final java.util.Map<String, Object> request) {

			javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
				public void write(java.io.OutputStream output) {

					final java.util.Map<String, Object> globalMap = java.util.Collections
							.synchronizedMap(new java.util.HashMap<String, Object>());

					try {
						globalMap.put("restResponseStream", output);

						globalMap.put("restRequest", request);

						populateRequestWithJobContext(globalMap, job);

						job.tRESTRequest_1_LoopProcess(globalMap);

						if (globalMap.containsKey("restResponseWrappingClosure")) {
							output.write(((String) globalMap.get("restResponseWrappingClosure")).getBytes());
						}
					} catch (Throwable ex) {
						ex.printStackTrace();
						throw new javax.ws.rs.WebApplicationException(ex, 500);
					} finally {
						// close DB connections
						closePassedDataSourceConnections(globalMap);
					}
				}
			};

			return javax.ws.rs.core.Response.ok().entity(streamingOutput).build();
		}

		@javax.ws.rs.POST()

		@javax.ws.rs.Path("/")
		@javax.ws.rs.Consumes({ "application/xml", "text/xml", "application/json" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response infoUser(

				String body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "infoUser");
			request_tRESTRequest_1.put("PATTERN", "/");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ;
			// method: " + context.getRequest().getMethod() + " ; status: " + status + " ;
			// error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();

			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());
			wrongRequest.put("URI_REQUEST", context.getUriInfo().getRequestUri().toString());

			return processRequest(wrongRequest);
		}

		private void populateRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context) {
			final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

			request.put("URI", ui.getPath());
			request.put("URI_BASE", ui.getBaseUri().toString());
			request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
			request.put("URI_REQUEST", ui.getRequestUri().toString());

			request.put("ALL_HEADER_PARAMS", context.getHttpHeaders().getRequestHeaders());
			request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext = context.getSecurityContext();
			if (null != securityContext && null != securityContext.getUserPrincipal()) {
				request.put("PRINCIPAL_NAME", securityContext.getUserPrincipal().getName());
			}

			request.put("CorrelationID", context.get("CorrelationID"));

			request.put("MESSAGE_CONTEXT", context);
		}

		private void populateMultipartRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context, java.util.List<String> partNames) {
			java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

			java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders = new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

			for (String partName : partNames) {
				org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(context, partName);
				if (null != attachment) {
					attachmentHeaders.put(partName, attachment.getHeaders());
					if (null != attachment.getContentDisposition()) {
						String filename = attachment.getContentDisposition().getParameter("filename");
						if (null != filename) {
							attachmentFilenames.put(partName, filename);
						}
					}
				}
			}

			request.put("ATTACHMENT_HEADERS", attachmentHeaders);
			request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext context, String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(context);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
				if (partName.equals(attachment.getContentId())) {
					return attachment;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return attachment;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService
			extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders()
					.getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null : accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml") && !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			javax.ws.rs.core.Response r = javax.ws.rs.core.Response.status(response.getStatus())
					.entity(response.getEntity()).type(responseType).build();

			if (response.getHeaders() != null) {
				r.getHeaders().putAll(response.getHeaders());
			}

			return r;
		}
	}

	protected String checkEndpointUrl(String url) {
		final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		String endpointUrl = url;
		if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
			endpointUrl = defaultEndpointUrl;
		} else if (!endpointUrl.contains("://")) { // relative
			if (endpointUrl.startsWith("/")) {
				endpointUrl = endpointUrl.substring(1);
			}
			endpointUrl = defaultEndpointUrl + endpointUrl;
		}

		// test for busy
		java.net.URI endpointURI = java.net.URI.create(endpointUrl);
		String host = endpointURI.getHost();
		try {
			if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
				int port = endpointURI.getPort();
				java.net.ServerSocket ss = null;
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} catch (IOException e) {
					// ok, nobody listens, proceed
				}
			}
		} catch (java.net.UnknownHostException e) {
			// ignore
		}

		return endpointUrl;
	}

	public static class StreamingDOM4JProvider extends org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

		public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

		private java.util.Map<String, Object> globalMap = null;

		public void setGlobalMap(java.util.Map<String, Object> globalMap) {
			this.globalMap = globalMap;
		}

		public void writeTo(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
				java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
				javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
				throws java.io.IOException, javax.ws.rs.WebApplicationException {
			if (mt.getSubtype().contains("xml")) {
				org.dom4j.io.XMLWriter writer;
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = (org.apache.cxf.message.Message) ((java.util.Map<String, Object>) globalMap
							.get("restRequest")).get("CURRENT_MESSAGE");
				}

				if (currentMessage != null && currentMessage.getExchange() != null
						&& currentMessage.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
					org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
					format.setSuppressDeclaration(true);
					writer = new org.dom4j.io.XMLWriter(os, format);
				} else {
					writer = new org.dom4j.io.XMLWriter(os);
				}
				writer.write(doc);
				writer.flush();
			} else {
				super.writeTo(doc, cls, type, anns, mt, headers, os);
			}
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {

		private final String endpointUrl;

		private final securitySystemService2 job;

		private org.apache.cxf.endpoint.Server server;

		private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

		public Thread4RestServiceProviderEndpoint(securitySystemService2 job, String endpointUrl) {
			this.job = job;
			this.endpointUrl = endpointUrl;
			this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
		}

		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		public org.apache.cxf.endpoint.Server getServer() {
			return server;
		}

		public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean() {
			return sf;
		}

		public void run() {

			try {
				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

				if (sf.getProperties() == null) {
					sf.setProperties(new java.util.HashMap<String, Object>());
				}

				java.util.List<Object> providers = (java.util.List<Object>) sf.getProviders();
				providers.add(new ExceptionMapper4TalendJobRestService(provider));
				providers.add(new StreamingDOM4JProvider());

				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				jsonProvider.setConvertTypesToStrings(false);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = sf.getFeatures() == null
						? new java.util.ArrayList<org.apache.cxf.feature.Feature>()
						: sf.getFeatures();

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl + "]
				// unpublished");
			}
		}
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "training" + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "talend";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:5PkiLblCVvQFBH1zL8qUvyRJcEIpcqlu8zG5c19EorleSQ==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "training");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRESTRequest_1_LoopProcess(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String isocode;

		public String getIsocode() {
			return this.isocode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.isocode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.isocode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("isocode=" + isocode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String isocode;

		public String getIsocode() {
			return this.isocode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.isocode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.isocode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("isocode=" + isocode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row4Struct row5 = row4;

				/**
				 * [tWriteJSONField_1_Out begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_Out", false);
				start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tWriteJSONField_1_Out = 0;

//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out = true;

				String strCompCache_tWriteJSONField_1_Out = null;

				java.util.Queue<row6Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row6Struct>();

				class ThreadXMLField_tWriteJSONField_1_Out extends Thread {

					java.util.Queue<row6Struct> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					java.lang.Error lastError;
					String currentComponent;

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						lastException = null;
					}

					ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tWriteJSONField_1_In", queue);
						globalMap.put("flows_tWriteJSONField_1_In", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public java.lang.Error getLastError() {
						return this.lastError;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tWriteJSONField_1_InProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						} catch (java.lang.Error error) {
							this.lastError = error;
						}
					}
				}

				ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(
						listGroupby_tWriteJSONField_1_Out);

				txf_tWriteJSONField_1_Out.start();

				java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String, String>();
				java.util.Map<String, String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String, String>();

				class NestXMLTool_tWriteJSONField_1_Out {
					public void parseAndAdd(org.dom4j.Element nestRoot, String value) {
						try {
							org.dom4j.Document doc4Str = org.dom4j.DocumentHelper
									.parseText("<root>" + value + "</root>");
							nestRoot.setContent(doc4Str.getRootElement().content());
						} catch (java.lang.Exception e) {
							e.printStackTrace();
							nestRoot.setText(value);
						}
					}

					public void setText(org.dom4j.Element element, String value) {
						if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
							String text = value.substring(9, value.length() - 3);
							element.addCDATA(text);
						} else {
							element.setText(value);
						}
					}

					public void replaceDefaultNameSpace(org.dom4j.Element nestRoot) {
						if (nestRoot != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
								if (("").equals(tmp.getQName().getNamespace().getURI())
										&& ("").equals(tmp.getQName().getNamespace().getPrefix())) {
									tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(),
											nestRoot.getQName().getNamespace()));
								}
								replaceDefaultNameSpace(tmp);
							}
						}
					}

					public void removeEmptyElement(org.dom4j.Element root) {
						if (root != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) root.elements()) {
								removeEmptyElement(tmp);
							}
							if (root.content().size() == 0 && root.attributes().size() == 0
									&& root.declaredNamespaces().size() == 0) {
								if (root.getParent() != null) {
									root.getParent().remove(root);
								}
							}
						}
					}

					public String objectToString(Object value) {
						if (value.getClass().isArray()) {
							StringBuilder sb = new StringBuilder();

							int length = java.lang.reflect.Array.getLength(value);
							for (int i = 0; i < length; i++) {
								Object obj = java.lang.reflect.Array.get(value, i);
								sb.append("<element>");
								sb.append(obj);
								sb.append("</element>");
							}
							return sb.toString();
						} else {
							return value.toString();
						}
					}
				}
				NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

				row4Struct rowStructOutput_tWriteJSONField_1_Out = new row4Struct();
// sort group root element for judgement of group
				java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
				org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
				org.dom4j.Document doc_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createDocument();
				org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat
						.createCompactFormat();
				format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
				format_tWriteJSONField_1_Out.setTrimText(false);
				format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
				int[] orders_tWriteJSONField_1_Out = new int[1];

				/**
				 * [tWriteJSONField_1_Out begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				class Util_tLogRow_4 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length() + 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
				util_tLogRow_4.setTableName("ENTRADA_FIXEDINPUT");
				util_tLogRow_4.addRow(new String[] { "isocode", });
				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					row4.isocode = ((String) globalMap.get("iso"));

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_4 main ] start
					 */

					currentComponent = "tLogRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

///////////////////////		

					String[] row_tLogRow_4 = new String[1];

					if (row4.isocode != null) { //
						row_tLogRow_4[0] = String.valueOf(row4.isocode);

					} //

					util_tLogRow_4.addRow(row_tLogRow_4);
					nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

					row5 = row4;

					tos_count_tLogRow_4++;

					/**
					 * [tLogRow_4 main ] stop
					 */

					/**
					 * [tLogRow_4 process_data_begin ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_begin ] stop
					 */

					/**
					 * [tWriteJSONField_1_Out main ] start
					 */

					currentVirtualComponent = "tWriteJSONField_1";

					currentComponent = "tWriteJSONField_1_Out";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					if (txf_tWriteJSONField_1_Out.getLastException() != null) {
						currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
						throw txf_tWriteJSONField_1_Out.getLastException();
					}

					if (txf_tWriteJSONField_1_Out.getLastError() != null) {
						throw txf_tWriteJSONField_1_Out.getLastError();
					}
					nb_line_tWriteJSONField_1_Out++;
					valueMap_tWriteJSONField_1_Out.clear();
					arraysValueMap_tWriteJSONField_1_Out.clear();
					valueMap_tWriteJSONField_1_Out.put("isocode",
							(row5.isocode != null ? row5.isocode.toString() : null));
					arraysValueMap_tWriteJSONField_1_Out.put("isocode",
							(row5.isocode != null ? row5.isocode.toString() : null));
					String strTemp_tWriteJSONField_1_Out = "";
					strTemp_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out
							+ valueMap_tWriteJSONField_1_Out.get("isocode")
							+ valueMap_tWriteJSONField_1_Out.get("isocode").length();
					if (strCompCache_tWriteJSONField_1_Out == null) {
						strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;

					} else {
						// the data read is different from the data read last time.
						if (!strCompCache_tWriteJSONField_1_Out.equals(strTemp_tWriteJSONField_1_Out)) {
							nestXMLTool_tWriteJSONField_1_Out
									.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
							java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
							org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
									strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
							output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
							output_tWriteJSONField_1_Out.close();

							row6Struct row_tWriteJSONField_1_Out = new row6Struct();

							row_tWriteJSONField_1_Out.body = strWriter_tWriteJSONField_1_Out.toString();
							listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);

							doc_tWriteJSONField_1_Out.clearContent();
							needRoot_tWriteJSONField_1_Out = true;
							for (int i_tWriteJSONField_1_Out = 0; i_tWriteJSONField_1_Out < orders_tWriteJSONField_1_Out.length; i_tWriteJSONField_1_Out++) {
								orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
							}

							if (groupbyList_tWriteJSONField_1_Out != null
									&& groupbyList_tWriteJSONField_1_Out.size() >= 0) {
								groupbyList_tWriteJSONField_1_Out.clear();
							}
							strCompCache_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out;
						}
					}

					org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;

					// build root xml tree
					if (needRoot_tWriteJSONField_1_Out) {
						needRoot_tWriteJSONField_1_Out = false;
						org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("infoiso");
						subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
						root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
					} else {
						subTreeRootParent_tWriteJSONField_1_Out = root4Group_tWriteJSONField_1_Out;
					}
					// build group xml tree
					// build loop xml tree
					org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("isocode");
					if (orders_tWriteJSONField_1_Out[0] == 0) {
						orders_tWriteJSONField_1_Out[0] = 0;
					}
					if (1 < orders_tWriteJSONField_1_Out.length) {
						orders_tWriteJSONField_1_Out[1] = 0;
					}
					subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,
							loop_tWriteJSONField_1_Out);
					if (valueMap_tWriteJSONField_1_Out.get("isocode") != null) {
						nestXMLTool_tWriteJSONField_1_Out.setText(loop_tWriteJSONField_1_Out,
								valueMap_tWriteJSONField_1_Out.get("isocode"));
					}

					tos_count_tWriteJSONField_1_Out++;

					/**
					 * [tWriteJSONField_1_Out main ] stop
					 */

					/**
					 * [tWriteJSONField_1_Out process_data_begin ] start
					 */

					currentVirtualComponent = "tWriteJSONField_1";

					currentComponent = "tWriteJSONField_1_Out";

					/**
					 * [tWriteJSONField_1_Out process_data_begin ] stop
					 */

					/**
					 * [tWriteJSONField_1_Out process_data_end ] start
					 */

					currentVirtualComponent = "tWriteJSONField_1";

					currentComponent = "tWriteJSONField_1_Out";

					/**
					 * [tWriteJSONField_1_Out process_data_end ] stop
					 */

					/**
					 * [tLogRow_4 process_data_end ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////

				java.io.PrintStream consoleOut_tLogRow_4 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}

				consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
				consoleOut_tLogRow_4.flush();
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out end ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				if (nb_line_tWriteJSONField_1_Out > 0) {
					nestXMLTool_tWriteJSONField_1_Out
							.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
					java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
					org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(
							strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
					output_tWriteJSONField_1_Out.close();
					row6Struct row_tWriteJSONField_1_Out = new row6Struct();

					row_tWriteJSONField_1_Out.body = strWriter_tWriteJSONField_1_Out.toString();
					listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);

				}
				globalMap.put("tWriteJSONField_1_Out_NB_LINE", nb_line_tWriteJSONField_1_Out);
				globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out == null ? ""
						: listGroupby_tWriteJSONField_1_Out.hashCode()), "true");

				txf_tWriteJSONField_1_Out.join();

				if (txf_tWriteJSONField_1_Out.getLastException() != null) {
					currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
					throw txf_tWriteJSONField_1_Out.getLastException();
				}

				if (txf_tWriteJSONField_1_Out.getLastError() != null) {
					throw txf_tWriteJSONField_1_Out.getLastError();
				}

				resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tWriteJSONField_1_Out", true);
				end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}

				/**
				 * [tWriteJSONField_1_Out end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tWriteJSONField_1_Out finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_Out";

				java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue) globalMap
						.get("queue_tWriteJSONField_1_In");
				if (resourceMap.get("finish_tWriteJSONField_1_Out") == null) {
					globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
							+ (listGroupby_tWriteJSONField_1_Out == null ? ""
									: listGroupby_tWriteJSONField_1_Out.hashCode()),
							"true");
				}

				if (listGroupby_tWriteJSONField_1_Out != null) {
					globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out == null ? ""
							: listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
				}

				/**
				 * [tWriteJSONField_1_Out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class EntradaCustomersStruct implements routines.system.IPersistableRow<EntradaCustomersStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String First;

		public String getFirst() {
			return this.First;
		}

		public String Last;

		public String getLast() {
			return this.Last;
		}

		public String Number;

		public String getNumber() {
			return this.Number;
		}

		public String Street;

		public String getStreet() {
			return this.Street;
		}

		public String CIty;

		public String getCIty() {
			return this.CIty;
		}

		public String State;

		public String getState() {
			return this.State;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.First = readString(dis);

					this.Last = readString(dis);

					this.Number = readString(dis);

					this.Street = readString(dis);

					this.CIty = readString(dis);

					this.State = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.First, dos);

				// String

				writeString(this.Last, dos);

				// String

				writeString(this.Number, dos);

				// String

				writeString(this.Street, dos);

				// String

				writeString(this.CIty, dos);

				// String

				writeString(this.State, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",First=" + First);
			sb.append(",Last=" + Last);
			sb.append(",Number=" + Number);
			sb.append(",Street=" + Street);
			sb.append(",CIty=" + CIty);
			sb.append(",State=" + State);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(EntradaCustomersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				EntradaCustomersStruct EntradaCustomers = new EntradaCustomersStruct();

				/**
				 * [tAdvancedHash_EntradaCustomers begin ] start
				 */

				ok_Hash.put("tAdvancedHash_EntradaCustomers", false);
				start_Hash.put("tAdvancedHash_EntradaCustomers", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_EntradaCustomers";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "EntradaCustomers");
				}

				int tos_count_tAdvancedHash_EntradaCustomers = 0;

				// connection name:EntradaCustomers
				// source node:tDBInput_1 - inputs:()
				// outputs:(EntradaCustomers,EntradaCustomers) | target
				// node:tAdvancedHash_EntradaCustomers - inputs:(EntradaCustomers) outputs:()
				// linked node: tMap_1 -
				// inputs:(EntradaJson,EntradaCustomers,EntradaPaises,EntradaGetToken)
				// outputs:(infoDI)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_EntradaCustomers = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaCustomersStruct> tHash_Lookup_EntradaCustomers = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<EntradaCustomersStruct>getLookup(matchingModeEnum_EntradaCustomers);

				globalMap.put("tHash_Lookup_EntradaCustomers", tHash_Lookup_EntradaCustomers);

				/**
				 * [tAdvancedHash_EntradaCustomers begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `customers`.`id`, \n  `customers`.`First`, \n  `customers`.`Last`, \n  `customers`.`Number`, \n  `customers`.`Str"
						+ "eet`, \n  `customers`.`CIty`, \n  `customers`.`State`\nFROM `customers`\nWHERE  `customers`.`Id` = '"
						+ ((String) globalMap.get("id")) + "'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							EntradaCustomers.id = null;
						} else {

							EntradaCustomers.id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							EntradaCustomers.First = null;
						} else {

							EntradaCustomers.First = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							EntradaCustomers.Last = null;
						} else {

							EntradaCustomers.Last = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							EntradaCustomers.Number = null;
						} else {

							EntradaCustomers.Number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							EntradaCustomers.Street = null;
						} else {

							EntradaCustomers.Street = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							EntradaCustomers.CIty = null;
						} else {

							EntradaCustomers.CIty = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							EntradaCustomers.State = null;
						} else {

							EntradaCustomers.State = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_EntradaCustomers main ] start
						 */

						currentComponent = "tAdvancedHash_EntradaCustomers";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "EntradaCustomers");
						}

						EntradaCustomersStruct EntradaCustomers_HashRow = new EntradaCustomersStruct();

						EntradaCustomers_HashRow.id = EntradaCustomers.id;

						EntradaCustomers_HashRow.First = EntradaCustomers.First;

						EntradaCustomers_HashRow.Last = EntradaCustomers.Last;

						EntradaCustomers_HashRow.Number = EntradaCustomers.Number;

						EntradaCustomers_HashRow.Street = EntradaCustomers.Street;

						EntradaCustomers_HashRow.CIty = EntradaCustomers.CIty;

						EntradaCustomers_HashRow.State = EntradaCustomers.State;

						tHash_Lookup_EntradaCustomers.put(EntradaCustomers_HashRow);

						tos_count_tAdvancedHash_EntradaCustomers++;

						/**
						 * [tAdvancedHash_EntradaCustomers main ] stop
						 */

						/**
						 * [tAdvancedHash_EntradaCustomers process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_EntradaCustomers";

						/**
						 * [tAdvancedHash_EntradaCustomers process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_EntradaCustomers process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_EntradaCustomers";

						/**
						 * [tAdvancedHash_EntradaCustomers process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaCustomers end ] start
				 */

				currentComponent = "tAdvancedHash_EntradaCustomers";

				tHash_Lookup_EntradaCustomers.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "EntradaCustomers");
				}

				ok_Hash.put("tAdvancedHash_EntradaCustomers", true);
				end_Hash.put("tAdvancedHash_EntradaCustomers", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_EntradaCustomers end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaCustomers finally ] start
				 */

				currentComponent = "tAdvancedHash_EntradaCustomers";

				/**
				 * [tAdvancedHash_EntradaCustomers finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class EntradaPaisesStruct
			implements routines.system.IPersistableComparableLookupRow<EntradaPaisesStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String iso;

		public String getIso() {
			return this.iso;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.country == null) ? 0 : this.country.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final EntradaPaisesStruct other = (EntradaPaisesStruct) obj;

			if (this.country == null) {
				if (other.country != null)
					return false;

			} else if (!this.country.equals(other.country))

				return false;

			return true;
		}

		public void copyDataTo(EntradaPaisesStruct other) {

			other.country = this.country;
			other.iso = this.iso;

		}

		public void copyKeysDataTo(EntradaPaisesStruct other) {

			other.country = this.country;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.iso = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.iso, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("country=" + country);
			sb.append(",iso=" + iso);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(EntradaPaisesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.country, other.country);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				EntradaPaisesStruct EntradaPaises = new EntradaPaisesStruct();

				/**
				 * [tAdvancedHash_EntradaPaises begin ] start
				 */

				ok_Hash.put("tAdvancedHash_EntradaPaises", false);
				start_Hash.put("tAdvancedHash_EntradaPaises", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_EntradaPaises";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "EntradaPaises");
				}

				int tos_count_tAdvancedHash_EntradaPaises = 0;

				// connection name:EntradaPaises
				// source node:tFileInputDelimited_1 - inputs:(after_tRESTRequest_1)
				// outputs:(EntradaPaises,EntradaPaises) | target
				// node:tAdvancedHash_EntradaPaises - inputs:(EntradaPaises) outputs:()
				// linked node: tMap_1 -
				// inputs:(EntradaJson,EntradaCustomers,EntradaPaises,EntradaGetToken)
				// outputs:(infoDI)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_EntradaPaises = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaPaisesStruct> tHash_Lookup_EntradaPaises = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<EntradaPaisesStruct>getLookup(matchingModeEnum_EntradaPaises);

				globalMap.put("tHash_Lookup_EntradaPaises", tHash_Lookup_EntradaPaises);

				/**
				 * [tAdvancedHash_EntradaPaises begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/FamiliaNatelloMedina/Documents/UNLu/AYI ACADEMI/SIMULACRO EXAMEN/Simulacro de examen/paises.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/FamiliaNatelloMedina/Documents/UNLu/AYI ACADEMI/SIMULACRO EXAMEN/Simulacro de examen/paises.csv",
								"ISO-8859-15", ",", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						EntradaPaises = null;

						EntradaPaises = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						EntradaPaises = new EntradaPaisesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							EntradaPaises.country = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							EntradaPaises.iso = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							EntradaPaises = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "EntradaPaises"
						if (EntradaPaises != null) {

							/**
							 * [tAdvancedHash_EntradaPaises main ] start
							 */

							currentComponent = "tAdvancedHash_EntradaPaises";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "EntradaPaises");
							}

							EntradaPaisesStruct EntradaPaises_HashRow = new EntradaPaisesStruct();

							EntradaPaises_HashRow.country = EntradaPaises.country;

							EntradaPaises_HashRow.iso = EntradaPaises.iso;

							tHash_Lookup_EntradaPaises.put(EntradaPaises_HashRow);

							tos_count_tAdvancedHash_EntradaPaises++;

							/**
							 * [tAdvancedHash_EntradaPaises main ] stop
							 */

							/**
							 * [tAdvancedHash_EntradaPaises process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_EntradaPaises";

							/**
							 * [tAdvancedHash_EntradaPaises process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_EntradaPaises process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_EntradaPaises";

							/**
							 * [tAdvancedHash_EntradaPaises process_data_end ] stop
							 */

						} // End of branch "EntradaPaises"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/FamiliaNatelloMedina/Documents/UNLu/AYI ACADEMI/SIMULACRO EXAMEN/Simulacro de examen/paises.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaPaises end ] start
				 */

				currentComponent = "tAdvancedHash_EntradaPaises";

				tHash_Lookup_EntradaPaises.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "EntradaPaises");
				}

				ok_Hash.put("tAdvancedHash_EntradaPaises", true);
				end_Hash.put("tAdvancedHash_EntradaPaises", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_EntradaPaises end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaPaises finally ] start
				 */

				currentComponent = "tAdvancedHash_EntradaPaises";

				/**
				 * [tAdvancedHash_EntradaPaises finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class EntradaGetTokenStruct implements routines.system.IPersistableRow<EntradaGetTokenStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String token;

		public String getToken() {
			return this.token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("token=" + token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(EntradaGetTokenStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				EntradaGetTokenStruct EntradaGetToken = new EntradaGetTokenStruct();

				/**
				 * [tAdvancedHash_EntradaGetToken begin ] start
				 */

				ok_Hash.put("tAdvancedHash_EntradaGetToken", false);
				start_Hash.put("tAdvancedHash_EntradaGetToken", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_EntradaGetToken";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "EntradaGetToken");
				}

				int tos_count_tAdvancedHash_EntradaGetToken = 0;

				// connection name:EntradaGetToken
				// source node:tRunJob_1 - inputs:() outputs:(EntradaGetToken,EntradaGetToken) |
				// target node:tAdvancedHash_EntradaGetToken - inputs:(EntradaGetToken)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(EntradaJson,EntradaCustomers,EntradaPaises,EntradaGetToken)
				// outputs:(infoDI)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_EntradaGetToken = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaGetTokenStruct> tHash_Lookup_EntradaGetToken = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<EntradaGetTokenStruct>getLookup(matchingModeEnum_EntradaGetToken);

				globalMap.put("tHash_Lookup_EntradaGetToken", tHash_Lookup_EntradaGetToken);

				/**
				 * [tAdvancedHash_EntradaGetToken begin ] stop
				 */

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
					Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
					if (value_tRunJob_1 != null) {
						paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					} else {
						paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

				}

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = ((String) globalMap.get("username"));
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param username=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param username=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("username", obj_tRunJob_1);

				obj_tRunJob_1 = ((String) globalMap.get("password"));
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("password", obj_tRunJob_1);

				dibasics.gettoken2_0_1.getToken2 childJob_tRunJob_1 = new dibasics.gettoken2_0_1.getToken2();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_1.getErrorCode();
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1 != null)
							? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage())
							: ""));
				}
				for (String[] item_tRunJob_1 : childReturn_tRunJob_1) {
					if (childJob_tRunJob_1.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_1.length) {

							EntradaGetToken.token = item_tRunJob_1[0];

						} else {
							EntradaGetToken.token = null;
						}

					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tRunJob_1 process_data_begin ] start
					 */

					currentComponent = "tRunJob_1";

					/**
					 * [tRunJob_1 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_EntradaGetToken main ] start
					 */

					currentComponent = "tAdvancedHash_EntradaGetToken";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "EntradaGetToken");
					}

					EntradaGetTokenStruct EntradaGetToken_HashRow = new EntradaGetTokenStruct();

					EntradaGetToken_HashRow.token = EntradaGetToken.token;

					tHash_Lookup_EntradaGetToken.put(EntradaGetToken_HashRow);

					tos_count_tAdvancedHash_EntradaGetToken++;

					/**
					 * [tAdvancedHash_EntradaGetToken main ] stop
					 */

					/**
					 * [tAdvancedHash_EntradaGetToken process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_EntradaGetToken";

					/**
					 * [tAdvancedHash_EntradaGetToken process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_EntradaGetToken process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_EntradaGetToken";

					/**
					 * [tAdvancedHash_EntradaGetToken process_data_end ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaGetToken end ] start
				 */

				currentComponent = "tAdvancedHash_EntradaGetToken";

				tHash_Lookup_EntradaGetToken.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "EntradaGetToken");
				}

				ok_Hash.put("tAdvancedHash_EntradaGetToken", true);
				end_Hash.put("tAdvancedHash_EntradaGetToken", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_EntradaGetToken end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_EntradaGetToken finally ] start
				 */

				currentComponent = "tAdvancedHash_EntradaGetToken";

				/**
				 * [tAdvancedHash_EntradaGetToken finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String iso;

		public String getIso() {
			return this.iso;
		}

		public String token;

		public String getToken() {
			return this.token;
		}

		public String number;

		public String getNumber() {
			return this.number;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.iso = readString(dis);

					this.token = readString(dis);

					this.number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iso, dos);

				// String

				writeString(this.token, dos);

				// String

				writeString(this.number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iso=" + iso);
			sb.append(",token=" + token);
			sb.append(",number=" + number);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class infoDIStruct implements routines.system.IPersistableRow<infoDIStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String iso;

		public String getIso() {
			return this.iso;
		}

		public String token;

		public String getToken() {
			return this.token;
		}

		public String number;

		public String getNumber() {
			return this.number;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.iso = readString(dis);

					this.token = readString(dis);

					this.number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iso, dos);

				// String

				writeString(this.token, dos);

				// String

				writeString(this.number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iso=" + iso);
			sb.append(",token=" + token);
			sb.append(",number=" + number);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(infoDIStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class EntradaJsonStruct implements routines.system.IPersistableRow<EntradaJsonStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.username = readString(dis);

					this.password = readString(dis);

					this.country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",username=" + username);
			sb.append(",password=" + password);
			sb.append(",country=" + country);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(EntradaJsonStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.username = readString(dis);

					this.password = readString(dis);

					this.country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.password, dos);

				// String

				writeString(this.country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",username=" + username);
			sb.append(",password=" + password);
			sb.append(",country=" + country);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class infoUserStruct implements routines.system.IPersistableRow<infoUserStruct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(infoUserStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRESTRequest_1Struct
			implements routines.system.IPersistableRow<after_tRESTRequest_1Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.method = readString(dis);

					this.status = readInteger(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.method, dos);

				// Integer

				writeInteger(this.status, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",method=" + method);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRESTRequest_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);

				infoUserStruct infoUser = new infoUserStruct();
				infoUserStruct row1 = infoUser;
				row2Struct row2 = new row2Struct();
				row2Struct EntradaJson = row2;
				infoDIStruct infoDI = new infoDIStruct();
				infoDIStruct row3 = infoDI;

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 0, 0, "infoUser", "row1", "row2", "EntradaJson", "infoDI",
							"row3");
				}

				infoUser = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					restEndpoint = getRestEndpoint();

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException("request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer && null == thread4RestServiceProviderEndpoint) {
								String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
								// *** external thread for endpoint initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(this,
										endpointUrl_tRESTRequest_1);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint initialization
							}

							restTalendJobAlreadyStarted = true;

							if (runInDaemonMode) {
								Thread.currentThread();
								try {
									while (true) {
										Thread.sleep(60000);
									}
								} catch (InterruptedException e_tRESTRequest_1) {
									// e_tRESTRequest_1.printStackTrace();
									// throw new TalendException(e_tRESTRequest_1, "wholeJob", globalMap);
								}
							}
						}
						return;
					}

					requestMessage_tRESTRequest_1.put("CURRENT_MESSAGE",
							org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage());

					Object ctx_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("MESSAGE_CONTEXT");
					if (ctx_tRESTRequest_1 != null
							&& ctx_tRESTRequest_1 instanceof org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) {
						requestMessage_tRESTRequest_1.put("MESSAGE_CONTEXT",
								((org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) ctx_tRESTRequest_1).get());
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.put("inIterateVComp", true);

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 1, "exec" + NB_ITERATE_tRESTRequest_1_In);
						// Thread.sleep(1000);
					}

					/**
					 * [tSetGlobalVar_1 begin ] start
					 */

					ok_Hash.put("tSetGlobalVar_1", false);
					start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

					currentComponent = "tSetGlobalVar_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
					}

					int tos_count_tSetGlobalVar_1 = 0;

					/**
					 * [tSetGlobalVar_1 begin ] stop
					 */

					/**
					 * [tLogRow_3 begin ] start
					 */

					ok_Hash.put("tLogRow_3", false);
					start_Hash.put("tLogRow_3", System.currentTimeMillis());

					currentComponent = "tLogRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "infoDI");
					}

					int tos_count_tLogRow_3 = 0;

					///////////////////////

					class Util_tLogRow_3 {

						String[] des_top = { ".", ".", "-", "+" };

						String[] des_head = { "|=", "=|", "-", "+" };

						String[] des_bottom = { "'", "'", "-", "+" };

						String name = "";

						java.util.List<String[]> list = new java.util.ArrayList<String[]>();

						int[] colLengths = new int[3];

						public void addRow(String[] row) {

							for (int i = 0; i < 3; i++) {
								if (row[i] != null) {
									colLengths[i] = Math.max(colLengths[i], row[i].length());
								}
							}
							list.add(row);
						}

						public void setTableName(String name) {

							this.name = name;
						}

						public StringBuilder format() {

							StringBuilder sb = new StringBuilder();

							sb.append(print(des_top));

							int totals = 0;
							for (int i = 0; i < colLengths.length; i++) {
								totals = totals + colLengths[i];
							}

							// name
							sb.append("|");
							int k = 0;
							for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
								sb.append(' ');
							}
							sb.append(name);
							for (int i = 0; i < totals + 2 - name.length() - k; i++) {
								sb.append(' ');
							}
							sb.append("|\n");

							// head and rows
							sb.append(print(des_head));
							for (int i = 0; i < list.size(); i++) {

								String[] row = list.get(i);

								java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

								StringBuilder sbformat = new StringBuilder();
								sbformat.append("|%1$-");
								sbformat.append(colLengths[0]);
								sbformat.append("s");

								sbformat.append("|%2$-");
								sbformat.append(colLengths[1]);
								sbformat.append("s");

								sbformat.append("|%3$-");
								sbformat.append(colLengths[2]);
								sbformat.append("s");

								sbformat.append("|\n");

								formatter.format(sbformat.toString(), (Object[]) row);

								sb.append(formatter.toString());
								if (i == 0)
									sb.append(print(des_head)); // print the head
							}

							// end
							sb.append(print(des_bottom));
							return sb;
						}

						private StringBuilder print(String[] fillChars) {
							StringBuilder sb = new StringBuilder();
							// first column
							sb.append(fillChars[0]);
							for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							// last column
							for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[1]);
							sb.append("\n");
							return sb;
						}

						public boolean isTableEmpty() {
							if (list.size() > 1)
								return false;
							return true;
						}
					}
					Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
					util_tLogRow_3.setTableName("SALIDA_DI");
					util_tLogRow_3.addRow(new String[] { "iso", "token", "number", });
					StringBuilder strBuffer_tLogRow_3 = null;
					int nb_line_tLogRow_3 = 0;
///////////////////////    			

					/**
					 * [tLogRow_3 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "EntradaJson");
					}

					int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaGetTokenStruct> tHash_Lookup_EntradaGetToken = null;

					EntradaGetTokenStruct EntradaGetTokenHashKey = new EntradaGetTokenStruct();
					EntradaGetTokenStruct EntradaGetTokenDefault = new EntradaGetTokenStruct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaCustomersStruct> tHash_Lookup_EntradaCustomers = null;

					EntradaCustomersStruct EntradaCustomersHashKey = new EntradaCustomersStruct();
					EntradaCustomersStruct EntradaCustomersDefault = new EntradaCustomersStruct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaPaisesStruct> tHash_Lookup_EntradaPaises = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaPaisesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaPaisesStruct>) globalMap
							.get("tHash_Lookup_EntradaPaises"));

					EntradaPaisesStruct EntradaPaisesHashKey = new EntradaPaisesStruct();
					EntradaPaisesStruct EntradaPaisesDefault = new EntradaPaisesStruct();
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
					infoDIStruct infoDI_tmp = new infoDIStruct();
// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tLogRow_2 begin ] start
					 */

					ok_Hash.put("tLogRow_2", false);
					start_Hash.put("tLogRow_2", System.currentTimeMillis());

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
					}

					int tos_count_tLogRow_2 = 0;

					///////////////////////

					class Util_tLogRow_2 {

						String[] des_top = { ".", ".", "-", "+" };

						String[] des_head = { "|=", "=|", "-", "+" };

						String[] des_bottom = { "'", "'", "-", "+" };

						String name = "";

						java.util.List<String[]> list = new java.util.ArrayList<String[]>();

						int[] colLengths = new int[4];

						public void addRow(String[] row) {

							for (int i = 0; i < 4; i++) {
								if (row[i] != null) {
									colLengths[i] = Math.max(colLengths[i], row[i].length());
								}
							}
							list.add(row);
						}

						public void setTableName(String name) {

							this.name = name;
						}

						public StringBuilder format() {

							StringBuilder sb = new StringBuilder();

							sb.append(print(des_top));

							int totals = 0;
							for (int i = 0; i < colLengths.length; i++) {
								totals = totals + colLengths[i];
							}

							// name
							sb.append("|");
							int k = 0;
							for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
								sb.append(' ');
							}
							sb.append(name);
							for (int i = 0; i < totals + 3 - name.length() - k; i++) {
								sb.append(' ');
							}
							sb.append("|\n");

							// head and rows
							sb.append(print(des_head));
							for (int i = 0; i < list.size(); i++) {

								String[] row = list.get(i);

								java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

								StringBuilder sbformat = new StringBuilder();
								sbformat.append("|%1$-");
								sbformat.append(colLengths[0]);
								sbformat.append("s");

								sbformat.append("|%2$-");
								sbformat.append(colLengths[1]);
								sbformat.append("s");

								sbformat.append("|%3$-");
								sbformat.append(colLengths[2]);
								sbformat.append("s");

								sbformat.append("|%4$-");
								sbformat.append(colLengths[3]);
								sbformat.append("s");

								sbformat.append("|\n");

								formatter.format(sbformat.toString(), (Object[]) row);

								sb.append(formatter.toString());
								if (i == 0)
									sb.append(print(des_head)); // print the head
							}

							// end
							sb.append(print(des_bottom));
							return sb;
						}

						private StringBuilder print(String[] fillChars) {
							StringBuilder sb = new StringBuilder();
							// first column
							sb.append(fillChars[0]);
							for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							// last column
							for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[1]);
							sb.append("\n");
							return sb;
						}

						public boolean isTableEmpty() {
							if (list.size() > 1)
								return false;
							return true;
						}
					}
					Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
					util_tLogRow_2.setTableName("PRODUCE_JSON");
					util_tLogRow_2.addRow(new String[] { "id", "username", "password", "country", });
					StringBuilder strBuffer_tLogRow_2 = null;
					int nb_line_tLogRow_2 = 0;
///////////////////////    			

					/**
					 * [tLogRow_2 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_1 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_1", false);
					start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
					}

					int tos_count_tExtractJSONFields_1 = 0;

					int nb_line_tExtractJSONFields_1 = 0;
					String jsonStr_tExtractJSONFields_1 = "";

					class ConvertJSONString_tExtractJSONFields_1 {
						final static int Brace = 0; // {
						final static int Bracket = 1; // [
						private int barceType = -1;
						private String originalJsonString = "";
						private String originalLoopString = "";
						private String jsonString4XML = null;
						private String loopString4XML = null;
						private String additionRoot = null;

						public void barceType() {

							for (int c = 0; c < originalJsonString.length(); ++c) {
								if (originalJsonString.charAt(c) == '{') {
									barceType = Brace;
									break;
								} else if (originalJsonString.charAt(c) == '[') {
									barceType = Bracket;
									break;
								}
							}
						}

						public void setJsonString(String originalJsonString) {
							this.originalJsonString = originalJsonString;
						}

						public void setLoopString(String originalLoopString) {
							this.originalLoopString = originalLoopString;
						}

						public String getJsonString4XML() {
							return jsonString4XML;
						}

						public String getLoopString4XML() {
							if (loopString4XML.length() > 1 && loopString4XML.endsWith("/")) {
								loopString4XML = loopString4XML.substring(0, loopString4XML.length() - 1);
							}
							return loopString4XML;
						}

						public void setAdditionRoot(String additionRoot) {
							this.additionRoot = additionRoot;
						}

						public String getAdditionRoot() {
							return additionRoot;
						}

						public void generate() {
							barceType();
							jsonString4XML = originalJsonString;
							loopString4XML = originalLoopString;
							if (Brace == barceType) {
								if (isNeedAddRoot(originalJsonString)) {
									jsonString4XML = "{ \"root\": " + originalJsonString + " }";
									loopString4XML = "root" + originalLoopString;
									setAdditionRoot("root");
								}
							} else if (Bracket == barceType) {
								jsonString4XML = "{ \"root\" : { \"object\": " + originalJsonString + " } }";
								loopString4XML = "root/object" + originalLoopString;
								setAdditionRoot("object");
							}
						}

						public boolean isNeedAddRoot(String originalJsonString) {
							boolean isNeedAddRoot = false;
							net.sf.json.JSONObject jso = net.sf.json.JSONObject.fromObject(originalJsonString);
							String jsonKey = "";
							Object firstObject = null;
							if (jso.names().size() == 1) {
								jsonKey = jso.names().get(0).toString();
								firstObject = jso.get(jsonKey);
							}
							if (jso.size() > 1 || (firstObject != null && firstObject instanceof net.sf.json.JSONArray
									&& ((net.sf.json.JSONArray) firstObject).size() > 1)) {
								isNeedAddRoot = true;
							}
							return isNeedAddRoot;
						}

					}

					ConvertJSONString_tExtractJSONFields_1 cjs_tExtractJSONFields_1 = new ConvertJSONString_tExtractJSONFields_1();

					de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
							.multiplePI(false).build();
					de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLInputFactory(
							config_tExtractJSONFields_1);
					javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_1 = javax.xml.stream.XMLOutputFactory
							.newInstance();
					boolean isGetWholeJson_tExtractJSONFields_1 = false;

					class OriginalJSONString_tExtractJSONFields_1 {
					}

					OriginalJSONString_tExtractJSONFields_1 originalJSONString_tExtractJSONFields_1 = new OriginalJSONString_tExtractJSONFields_1();

					class XML_API_tExtractJSONFields_1 {
						public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null && node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
								if (attri != null && ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					String xmlStr_tExtractJSONFields_1 = "";

					XML_API_tExtractJSONFields_1 xml_api_tExtractJSONFields_1 = new XML_API_tExtractJSONFields_1();

					/**
					 * [tExtractJSONFields_1 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "infoUser");
					}

					int tos_count_tLogRow_1 = 0;

					///////////////////////

					class Util_tLogRow_1 {

						String[] des_top = { ".", ".", "-", "+" };

						String[] des_head = { "|=", "=|", "-", "+" };

						String[] des_bottom = { "'", "'", "-", "+" };

						String name = "";

						java.util.List<String[]> list = new java.util.ArrayList<String[]>();

						int[] colLengths = new int[1];

						public void addRow(String[] row) {

							for (int i = 0; i < 1; i++) {
								if (row[i] != null) {
									colLengths[i] = Math.max(colLengths[i], row[i].length());
								}
							}
							list.add(row);
						}

						public void setTableName(String name) {

							this.name = name;
						}

						public StringBuilder format() {

							StringBuilder sb = new StringBuilder();

							sb.append(print(des_top));

							int totals = 0;
							for (int i = 0; i < colLengths.length; i++) {
								totals = totals + colLengths[i];
							}

							// name
							sb.append("|");
							int k = 0;
							for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
								sb.append(' ');
							}
							sb.append(name);
							for (int i = 0; i < totals + 0 - name.length() - k; i++) {
								sb.append(' ');
							}
							sb.append("|\n");

							// head and rows
							sb.append(print(des_head));
							for (int i = 0; i < list.size(); i++) {

								String[] row = list.get(i);

								java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

								StringBuilder sbformat = new StringBuilder();
								sbformat.append("|%1$-");
								sbformat.append(colLengths[0]);
								sbformat.append("s");

								sbformat.append("|\n");

								formatter.format(sbformat.toString(), (Object[]) row);

								sb.append(formatter.toString());
								if (i == 0)
									sb.append(print(des_head)); // print the head
							}

							// end
							sb.append(print(des_bottom));
							return sb;
						}

						private StringBuilder print(String[] fillChars) {
							StringBuilder sb = new StringBuilder();
							// first column
							sb.append(fillChars[0]);

							// last column
							for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()
									+ 2; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[1]);
							sb.append("\n");
							return sb;
						}

						public boolean isTableEmpty() {
							if (list.size() > 1)
								return false;
							return true;
						}
					}
					Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
					util_tLogRow_1.setTableName("ENTRADA_REQUEST");
					util_tLogRow_1.addRow(new String[] { "body", });
					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
///////////////////////    			

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					resourceMap.remove("inIterateVComp");

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong request received
						infoUser = null;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("infoUser")) {
							infoUser = new infoUserStruct();
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								infoUser.body = (String) bodyObject_tRESTRequest_1;

							}
						} else { // non matched flow
							infoUser = null;
						}

					}

					globalMap.put("tRESTRequest_1_URI", (String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE", (String) requestMessage_tRESTRequest_1.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_URI_REQUEST",
							(String) requestMessage_tRESTRequest_1.get("URI_REQUEST"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD", (String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */

					/**
					 * [tRESTRequest_1_In process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_begin ] stop
					 */
// Start of branch "infoUser"
					if (infoUser != null) {

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "infoUser");
						}

///////////////////////		

						String[] row_tLogRow_1 = new String[1];

						if (infoUser.body != null) { //
							row_tLogRow_1[0] = String.valueOf(infoUser.body);

						} //

						util_tLogRow_1.addRow(row_tLogRow_1);
						nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

						row1 = infoUser;

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tExtractJSONFields_1 main ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						if (row1.body != null) {// C_01
							jsonStr_tExtractJSONFields_1 = row1.body.toString();

							row2 = null;

							org.dom4j.io.SAXReader reader_tExtractJSONFields_1 = new org.dom4j.io.SAXReader();
							org.dom4j.Document doc_tExtractJSONFields_1 = null;
							java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_1 = new java.util.HashMap<String, String>();
							org.dom4j.XPath x_tExtractJSONFields_1 = null;
							java.util.List<org.dom4j.Node> nodeList_tExtractJSONFields_1 = null;
							boolean isStructError_tExtractJSONFields_1 = true;

							String loopQuery_tExtractJSONFields_1 = "/";
							String oraginalJsonStr_tExtractJSONFields_1 = jsonStr_tExtractJSONFields_1;
							cjs_tExtractJSONFields_1.setJsonString(jsonStr_tExtractJSONFields_1);
							cjs_tExtractJSONFields_1.setLoopString(loopQuery_tExtractJSONFields_1);
							java.io.ByteArrayInputStream bais_tExtractJSONFields_1 = null;
							java.io.ByteArrayOutputStream baos_tExtractJSONFields_1 = new java.io.ByteArrayOutputStream();
							try {
								cjs_tExtractJSONFields_1.generate();
								jsonStr_tExtractJSONFields_1 = cjs_tExtractJSONFields_1.getJsonString4XML();
								loopQuery_tExtractJSONFields_1 = cjs_tExtractJSONFields_1.getLoopString4XML();
								bais_tExtractJSONFields_1 = new ByteArrayInputStream(
										jsonStr_tExtractJSONFields_1.getBytes("UTF-8"));
								javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_1 = jsonXMLInputFactory_tExtractJSONFields_1
										.createXMLEventReader(bais_tExtractJSONFields_1);
								javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_1 = xmlOutputFactory_tExtractJSONFields_1
										.createXMLEventWriter(baos_tExtractJSONFields_1, "UTF-8");
								xmLEventWriter_tExtractJSONFields_1.add(xmlEventReader_tExtractJSONFields_1);
								// convert json string to xml
								xmlStr_tExtractJSONFields_1 = baos_tExtractJSONFields_1.toString();
								xmLEventWriter_tExtractJSONFields_1.close();
								xmlEventReader_tExtractJSONFields_1.close();

								doc_tExtractJSONFields_1 = reader_tExtractJSONFields_1
										.read(new java.io.StringReader(xmlStr_tExtractJSONFields_1));
								x_tExtractJSONFields_1 = doc_tExtractJSONFields_1
										.createXPath(loopQuery_tExtractJSONFields_1);
								x_tExtractJSONFields_1.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
								nodeList_tExtractJSONFields_1 = (java.util.List<org.dom4j.Node>) x_tExtractJSONFields_1
										.selectNodes(doc_tExtractJSONFields_1);
								isStructError_tExtractJSONFields_1 = false;

							} catch (java.lang.Exception ex_tExtractJSONFields_1) {
								System.err.println(ex_tExtractJSONFields_1.getMessage());
							} finally {
								baos_tExtractJSONFields_1.close();
								if (bais_tExtractJSONFields_1 != null) {
									bais_tExtractJSONFields_1.close();
								}
							}

							org.dom4j.Node node_tExtractJSONFields_1 = null;
							String str_tExtractJSONFields_1 = "";
							for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
									|| (nodeList_tExtractJSONFields_1 != null
											&& i_tExtractJSONFields_1 < nodeList_tExtractJSONFields_1
													.size()); i_tExtractJSONFields_1++) {

								if (!isStructError_tExtractJSONFields_1) {
									row2 = null;
									row2 = new row2Struct();

									org.dom4j.Node temp_tExtractJSONFields_1 = nodeList_tExtractJSONFields_1
											.get(i_tExtractJSONFields_1);

									nb_line_tExtractJSONFields_1++;
									try {
										org.dom4j.XPath xTmp0_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("id");
										xTmp0_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj0_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj0_tExtractJSONFields_1 instanceof String
												|| obj0_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String.valueOf(obj0_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1.isDefNull(node_tExtractJSONFields_1)) {
											row2.id = null;
										} else if (xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)) {
											row2.id = "";
										} else if (xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1)) {
											row2.id = null;
										} else {

											row2.id = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp1_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("username");
										xTmp1_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj1_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj1_tExtractJSONFields_1 instanceof String
												|| obj1_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String.valueOf(obj1_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1.isDefNull(node_tExtractJSONFields_1)) {
											row2.username = null;
										} else if (xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)) {
											row2.username = "";
										} else if (xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1)) {
											row2.username = null;
										} else {

											row2.username = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp2_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("password");
										xTmp2_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj2_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj2_tExtractJSONFields_1 instanceof String
												|| obj2_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String.valueOf(obj2_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1.isDefNull(node_tExtractJSONFields_1)) {
											row2.password = null;
										} else if (xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)) {
											row2.password = "";
										} else if (xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1)) {
											row2.password = null;
										} else {

											row2.password = str_tExtractJSONFields_1;

										}

										org.dom4j.XPath xTmp3_tExtractJSONFields_1 = temp_tExtractJSONFields_1
												.createXPath("country");
										xTmp3_tExtractJSONFields_1
												.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
										Object obj3_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
												.evaluate(temp_tExtractJSONFields_1);
										if (obj3_tExtractJSONFields_1 instanceof String
												|| obj3_tExtractJSONFields_1 instanceof Number) {
											node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
											str_tExtractJSONFields_1 = String.valueOf(obj3_tExtractJSONFields_1);
										} else {
											node_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
													.selectSingleNode(temp_tExtractJSONFields_1);

											str_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
													.valueOf(temp_tExtractJSONFields_1);

										}

										if (xml_api_tExtractJSONFields_1.isDefNull(node_tExtractJSONFields_1)) {
											row2.country = null;
										} else if (xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)) {
											row2.country = "";
										} else if (xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1)) {
											row2.country = null;
										} else {

											row2.country = str_tExtractJSONFields_1;

										}

									} catch (java.lang.Exception ex_tExtractJSONFields_1) {
										System.err.println(ex_tExtractJSONFields_1.getMessage());
										row2 = null;
									}
								}

								isStructError_tExtractJSONFields_1 = false;

								tos_count_tExtractJSONFields_1++;

								/**
								 * [tExtractJSONFields_1 main ] stop
								 */

								/**
								 * [tExtractJSONFields_1 process_data_begin ] start
								 */

								currentComponent = "tExtractJSONFields_1";

								/**
								 * [tExtractJSONFields_1 process_data_begin ] stop
								 */
// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
									}

///////////////////////		

									String[] row_tLogRow_2 = new String[4];

									if (row2.id != null) { //
										row_tLogRow_2[0] = String.valueOf(row2.id);

									} //

									if (row2.username != null) { //
										row_tLogRow_2[1] = String.valueOf(row2.username);

									} //

									if (row2.password != null) { //
										row_tLogRow_2[2] = String.valueOf(row2.password);

									} //

									if (row2.country != null) { //
										row_tLogRow_2[3] = String.valueOf(row2.country);

									} //

									util_tLogRow_2.addRow(row_tLogRow_2);
									nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

									EntradaJson = row2;

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

									/**
									 * [tLogRow_2 process_data_begin ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_begin ] stop
									 */

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "EntradaJson");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "EntradaGetToken"
									///////////////////////////////////////////////

									boolean forceLoopEntradaGetToken = false;

									EntradaGetTokenStruct EntradaGetTokenObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										globalMap.put("username", EntradaJson.username);

										globalMap.put("password", EntradaJson.password);

										tRunJob_1Process(globalMap);

										tHash_Lookup_EntradaGetToken = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaGetTokenStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaGetTokenStruct>) globalMap
												.get("tHash_Lookup_EntradaGetToken"));

										tHash_Lookup_EntradaGetToken.initGet();

										tHash_Lookup_EntradaGetToken.lookup(EntradaGetTokenHashKey);

										if (!tHash_Lookup_EntradaGetToken.hasNext()) { // G_TM_M_090

											forceLoopEntradaGetToken = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLoopEntradaGetToken = true;
									} // G 21

									EntradaGetTokenStruct EntradaGetToken = null;

									while ((tHash_Lookup_EntradaGetToken != null
											&& tHash_Lookup_EntradaGetToken.hasNext()) || forceLoopEntradaGetToken) { // G_TM_M_043

										// CALL close loop of lookup 'EntradaGetToken'

										EntradaGetTokenStruct fromLookup_EntradaGetToken = null;
										EntradaGetToken = EntradaGetTokenDefault;

										if (!forceLoopEntradaGetToken) { // G 46

											fromLookup_EntradaGetToken = tHash_Lookup_EntradaGetToken.next();

											if (fromLookup_EntradaGetToken != null) {
												EntradaGetToken = fromLookup_EntradaGetToken;
											}

										} // G 46

										forceLoopEntradaGetToken = false;

										///////////////////////////////////////////////
										// Starting Lookup Table "EntradaCustomers"
										///////////////////////////////////////////////

										boolean forceLoopEntradaCustomers = false;

										EntradaCustomersStruct EntradaCustomersObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

											globalMap.put("id", EntradaJson.id);

											tDBInput_1Process(globalMap);

											tHash_Lookup_EntradaCustomers = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaCustomersStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EntradaCustomersStruct>) globalMap
													.get("tHash_Lookup_EntradaCustomers"));

											tHash_Lookup_EntradaCustomers.initGet();

											tHash_Lookup_EntradaCustomers.lookup(EntradaCustomersHashKey);

											if (!tHash_Lookup_EntradaCustomers.hasNext()) { // G_TM_M_090

												forceLoopEntradaCustomers = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLoopEntradaCustomers = true;
										} // G 21

										EntradaCustomersStruct EntradaCustomers = null;

										while ((tHash_Lookup_EntradaCustomers != null
												&& tHash_Lookup_EntradaCustomers.hasNext())
												|| forceLoopEntradaCustomers) { // G_TM_M_043

											// CALL close loop of lookup 'EntradaCustomers'

											EntradaCustomersStruct fromLookup_EntradaCustomers = null;
											EntradaCustomers = EntradaCustomersDefault;

											if (!forceLoopEntradaCustomers) { // G 46

												fromLookup_EntradaCustomers = tHash_Lookup_EntradaCustomers.next();

												if (fromLookup_EntradaCustomers != null) {
													EntradaCustomers = fromLookup_EntradaCustomers;
												}

											} // G 46

											forceLoopEntradaCustomers = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "EntradaPaises"
											///////////////////////////////////////////////

											boolean forceLoopEntradaPaises = false;

											EntradaPaisesStruct EntradaPaisesObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_1 = false;

												EntradaPaisesHashKey.country = EntradaJson.country;

												EntradaPaisesHashKey.hashCodeDirty = true;

												tHash_Lookup_EntradaPaises.lookup(EntradaPaisesHashKey);

											} // G_TM_M_020

											if (tHash_Lookup_EntradaPaises != null
													&& tHash_Lookup_EntradaPaises.getCount(EntradaPaisesHashKey) > 1) { // G
																														// 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the
												// lookup 'EntradaPaises' and it contains more one result from keys :
												// EntradaPaises.country = '" + EntradaPaisesHashKey.country + "'");
											} // G 071

											EntradaPaisesStruct EntradaPaises = null;

											EntradaPaisesStruct fromLookup_EntradaPaises = null;
											EntradaPaises = EntradaPaisesDefault;

											if (tHash_Lookup_EntradaPaises != null
													&& tHash_Lookup_EntradaPaises.hasNext()) { // G 099

												fromLookup_EntradaPaises = tHash_Lookup_EntradaPaises.next();

											} // G 099

											if (fromLookup_EntradaPaises != null) {
												EntradaPaises = fromLookup_EntradaPaises;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
												// ###############################
												// # Output tables

												infoDI = null;

// # Output table : 'infoDI'
												infoDI_tmp.iso = EntradaPaises.iso;
												infoDI_tmp.token = EntradaGetToken.token;
												infoDI_tmp.number = EntradaCustomers.Number;
												infoDI = infoDI_tmp;
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_1 = false;

											tos_count_tMap_1++;

											/**
											 * [tMap_1 main ] stop
											 */

											/**
											 * [tMap_1 process_data_begin ] start
											 */

											currentComponent = "tMap_1";

											/**
											 * [tMap_1 process_data_begin ] stop
											 */
// Start of branch "infoDI"
											if (infoDI != null) {

												/**
												 * [tLogRow_3 main ] start
												 */

												currentComponent = "tLogRow_3";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1, "infoDI");
												}

///////////////////////		

												String[] row_tLogRow_3 = new String[3];

												if (infoDI.iso != null) { //
													row_tLogRow_3[0] = String.valueOf(infoDI.iso);

												} //

												if (infoDI.token != null) { //
													row_tLogRow_3[1] = String.valueOf(infoDI.token);

												} //

												if (infoDI.number != null) { //
													row_tLogRow_3[2] = String.valueOf(infoDI.number);

												} //

												util_tLogRow_3.addRow(row_tLogRow_3);
												nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

												row3 = infoDI;

												tos_count_tLogRow_3++;

												/**
												 * [tLogRow_3 main ] stop
												 */

												/**
												 * [tLogRow_3 process_data_begin ] start
												 */

												currentComponent = "tLogRow_3";

												/**
												 * [tLogRow_3 process_data_begin ] stop
												 */

												/**
												 * [tSetGlobalVar_1 main ] start
												 */

												currentComponent = "tSetGlobalVar_1";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
												}

												globalMap.put("iso", row3.iso);
												globalMap.put("token", row3.token);
												globalMap.put("number", row3.number);

												tos_count_tSetGlobalVar_1++;

												/**
												 * [tSetGlobalVar_1 main ] stop
												 */

												/**
												 * [tSetGlobalVar_1 process_data_begin ] start
												 */

												currentComponent = "tSetGlobalVar_1";

												/**
												 * [tSetGlobalVar_1 process_data_begin ] stop
												 */

												/**
												 * [tSetGlobalVar_1 process_data_end ] start
												 */

												currentComponent = "tSetGlobalVar_1";

												/**
												 * [tSetGlobalVar_1 process_data_end ] stop
												 */

												/**
												 * [tLogRow_3 process_data_end ] start
												 */

												currentComponent = "tLogRow_3";

												/**
												 * [tLogRow_3 process_data_end ] stop
												 */

											} // End of branch "infoDI"

										} // close loop of lookup 'EntradaCustomers' // G_TM_M_043

									} // close loop of lookup 'EntradaGetToken' // G_TM_M_043

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

									/**
									 * [tLogRow_2 process_data_end ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_end ] stop
									 */

								} // End of branch "row2"

								// end for
							}

						} // C_01

						/**
						 * [tExtractJSONFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractJSONFields_1";

						/**
						 * [tExtractJSONFields_1 process_data_end ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

					} // End of branch "infoUser"

					/**
					 * [tRESTRequest_1_In process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					resourceMap.put("inIterateVComp", true);

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

//////

					java.io.PrintStream consoleOut_tLogRow_1 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}

					consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
					consoleOut_tLogRow_1.flush();
//////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "infoUser");
					}

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tExtractJSONFields_1 end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
					}

					ok_Hash.put("tExtractJSONFields_1", true);
					end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_1 end ] stop
					 */

					/**
					 * [tLogRow_2 end ] start
					 */

					currentComponent = "tLogRow_2";

//////

					java.io.PrintStream consoleOut_tLogRow_2 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}

					consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
					consoleOut_tLogRow_2.flush();
//////
					globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
					}

					ok_Hash.put("tLogRow_2", true);
					end_Hash.put("tLogRow_2", System.currentTimeMillis());

					/**
					 * [tLogRow_2 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "EntradaJson");
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tLogRow_3 end ] start
					 */

					currentComponent = "tLogRow_3";

//////

					java.io.PrintStream consoleOut_tLogRow_3 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
					}

					consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
					consoleOut_tLogRow_3.flush();
//////
					globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "infoDI");
					}

					ok_Hash.put("tLogRow_3", true);
					end_Hash.put("tLogRow_3", System.currentTimeMillis());

					/**
					 * [tLogRow_3 end ] stop
					 */

					/**
					 * [tSetGlobalVar_1 end ] start
					 */

					currentComponent = "tSetGlobalVar_1";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
					}

					ok_Hash.put("tSetGlobalVar_1", true);
					end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
					}
					tFixedFlowInput_1Process(globalMap);

					/**
					 * [tSetGlobalVar_1 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 2, "exec" + NB_ITERATE_tRESTRequest_1_In);
					}

					/**
					 * [tRESTRequest_1_Loop process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.remove("inIterateVComp");

				} catch (Throwable e_tRESTRequest_1) {
					if (e_tRESTRequest_1 instanceof Exception) {
						new TalendException((Exception) e_tRESTRequest_1, currentComponent, globalMap)
								.printStackTrace();
					} else {
						new TalendException(new RuntimeException(e_tRESTRequest_1), currentComponent, globalMap)
								.printStackTrace();
					}
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY", e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 2, 0, "infoUser", "row1", "row2", "EntradaJson", "infoDI",
							"row3");
				}

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_EntradaCustomers");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_EntradaPaises");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_EntradaGetToken");

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_securitySystemService2 = new byte[0];
		static byte[] commonByteArray_DIBASICS_securitySystemService2 = new byte[0];

		public String body;

		public String getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_securitySystemService2.length) {
					if (length < 1024 && commonByteArray_DIBASICS_securitySystemService2.length == 0) {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[1024];
					} else {
						commonByteArray_DIBASICS_securitySystemService2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_securitySystemService2, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_securitySystemService2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_securitySystemService2) {

				try {

					int length = 0;

					this.body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length() + 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("JSON_ISO_ARMADO");
				util_tLogRow_5.addRow(new String[] { "body", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tWriteJSONField_1_In begin ] start
				 */

				ok_Hash.put("tWriteJSONField_1_In", false);
				start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				int tos_count_tWriteJSONField_1_In = 0;

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer();
				xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
				xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
				xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_1_In.setUseEmptyStrings(false);

				java.util.Queue<row6Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row6Struct>) globalMap
						.get("queue_tWriteJSONField_1_In");

				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"
						+ (queue_tWriteJSONField_1_In == null ? "" : queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;

				while (!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In)
						|| !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {

						/**
						 * [tWriteJSONField_1_In begin ] stop
						 */

						/**
						 * [tWriteJSONField_1_In main ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						row6Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
						str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.body;
						row6.body = result_tWriteJSONField_1_In.body;
						// Convert XML to JSON
						net.sf.json.JsonStandard jsonStandard_tWriteJSONField_1_In = net.sf.json.JsonStandard.LEGACY;
						xmlSerializer_tWriteJSONField_1_In.setJsonStandard(jsonStandard_tWriteJSONField_1_In);
						net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In
								.read(str_tWriteJSONField_1_In);
						row6.body = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_1_In,
								jsonStandard_tWriteJSONField_1_In);

						nb_line_tWriteJSONField_1_In++;

						tos_count_tWriteJSONField_1_In++;

						/**
						 * [tWriteJSONField_1_In main ] stop
						 */

						/**
						 * [tWriteJSONField_1_In process_data_begin ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						/**
						 * [tWriteJSONField_1_In process_data_begin ] stop
						 */

						/**
						 * [tLogRow_5 main ] start
						 */

						currentComponent = "tLogRow_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

///////////////////////		

						String[] row_tLogRow_5 = new String[1];

						if (row6.body != null) { //
							row_tLogRow_5[0] = String.valueOf(row6.body);

						} //

						util_tLogRow_5.addRow(row_tLogRow_5);
						nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_5++;

						/**
						 * [tLogRow_5 main ] stop
						 */

						/**
						 * [tLogRow_5 process_data_begin ] start
						 */

						currentComponent = "tLogRow_5";

						/**
						 * [tLogRow_5 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_5 process_data_end ] start
						 */

						currentComponent = "tLogRow_5";

						/**
						 * [tLogRow_5 process_data_end ] stop
						 */

						/**
						 * [tWriteJSONField_1_In process_data_end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

						/**
						 * [tWriteJSONField_1_In process_data_end ] stop
						 */

						/**
						 * [tWriteJSONField_1_In end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_1";

						currentComponent = "tWriteJSONField_1_In";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"
						+ (queue_tWriteJSONField_1_In == null ? "" : queue_tWriteJSONField_1_In.hashCode());
				if (globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)) {
					if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
						globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
					}
					globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
					return;
				}
				globalMap.remove("queue_tWriteJSONField_1_In");

				if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In, null);// syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);

				globalMap.put("tWriteJSONField_1_NB_LINE", nb_line_tWriteJSONField_1_In);

				ok_Hash.put("tWriteJSONField_1_In", true);
				end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());

				/**
				 * [tWriteJSONField_1_In end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWriteJSONField_1_In finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_1";

				currentComponent = "tWriteJSONField_1_In";

				/**
				 * [tWriteJSONField_1_In finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final securitySystemService2 securitySystemService2Class = new securitySystemService2();

		int exitCode = securitySystemService2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = securitySystemService2.class.getClassLoader()
					.getResourceAsStream("dibasics/securitysystemservice2_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = securitySystemService2.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : securitySystemService2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 233637 characters generated by Talend Open Studio for ESB on the 7 de marzo
 * de 2023, 17:24:54 ART
 ************************************************************************************************/